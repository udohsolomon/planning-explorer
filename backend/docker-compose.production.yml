version: '3.8'

services:
  planning-explorer-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: planning-explorer-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application
      - DEBUG=false
      - API_VERSION=1.0.0
      - LOG_LEVEL=INFO
      - WORKERS=4

      # Database connections
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

      # Performance
      - MAX_CONNECTIONS=100
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_PERIOD=60
      - CACHE_TTL=300

      # Monitoring
      - ENABLE_METRICS=true
      - HEALTH_CHECK_INTERVAL=30

    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/health/liveness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - planning-explorer-network
    depends_on:
      - elasticsearch
      - nginx

  # Elasticsearch for search functionality
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: planning-explorer-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config:/usr/share/elasticsearch/config
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTICSEARCH_PASSWORD} -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - planning-explorer-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: planning-explorer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - planning-explorer-api
    networks:
      - planning-explorer-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: planning-explorer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - planning-explorer-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: planning-explorer-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - planning-explorer-network
    profiles:
      - monitoring

  # Log aggregation with Filebeat (optional)
  filebeat:
    image: elastic/filebeat:8.11.0
    container_name: planning-explorer-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./logs:/app/logs:ro
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - planning-explorer-network
    profiles:
      - monitoring
    depends_on:
      - elasticsearch

volumes:
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  planning-explorer-network:
    driver: bridge